#goes with src: secure_signin
#to create and use secure passwords, must encrypt using hash!
#every user has a password_digest:string

#in Gemfile
gem 'bcrypt-ruby', '3.1.2'

$bundle install

#app/models/user.rb
require 'bcrypt'

class User < ActiveRecord::Base
  #users.password_hash in DB is a :string
  include BCrypt

  before_save { self.email = email.downcase }
  validates :name, presence: true, length: { maximum: 50 }
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  validates :email, presence:   true,
                    format:     { with: VALID_EMAIL_REGEX },
                    uniqueness: { case_sensitive: false }
  has_secure_password
  validates :password, length: { minimum: 6 }

end

#perhaps some other configs may be good too
validates :password, length: { minimum: 8}
VALID_PASS_REGEX = ...
validates :password, format


#some operations by rails console we can use
user = User.find_by(email: email)
user.password_digest <-- hashed version of password
current_user = user.authenticate(password)
Digest::MD5::hexdigest(email.downcase)

#sign in with ssl
#in config/environments/production.rb
MyApp:Application.configure do
  #Force all access to app over SSL, use Strict-TRansport security and secure cookies
  config.force_ssl = true
end

#Create Session!! src: secure_signin 

#Implement SessionsHelper. src: secure_signin

#
<% if signed_in? %>
  #do cool stuff
  <%= link_to "Profile", current_user %>
  <%= link_to "Profile", user_path(current_user) %>
  <%= link_to "Sign out", signout_path, method: "delete" %>
<% else %>
  #not cool enough
<% end %>

#to sign in user upon signup
#in app/controllers/users_controller.rb
  def create
    @user = User.new(user_params)
    if @user.save
      sign_in @user
      flash[:success] = "Welcome!"
      redirect_to @user
    else
      render 'new'
    end
  end
