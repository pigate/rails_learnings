#use password, email with digest/hex
#assumes you did src: password_secure

#force sign in with ssl

#in config/environments/production.rb
MyApp:Application.configure do
  #Force all access to app over SSL, use Strict-TRansport security and secure co
okies

#for this example scheme, we have signin page for NEW sessions

# signing in will CREATE a session

# signing out will DESTROY sesion

#Sessions resource will use a COOKIE to persist itself

--> Cookie-based authentication 

#1. Create Sessions Controller
#2. Create Signin Form
#3. Complete user signin with necessary cookie-manipulation code

rails g controller Sessions --no-test-framework

#config/routes.rb
resources :users
resources :sessions, only: [:new, :create, :destroy]
match '/signup', to: 'users#new', via: 'get'
match '/signin', to: 'sessions#new', via: 'get'
match '/signout', to: 'sessions#destroy', via: 'delete'


#double check
$rake routes
HTTP request 	URL 	Named route 	Action 	Purpose
GET 	/signin 	signin_path 	new 	page for a new session (signin)
POST 	/sessions 	sessions_path 	create 	create a new session
DELETE 	/signout 	signout_path 	destroy 	delete a session (sign out)

#app/views/sessions/new.html.erb
<% provide(:title, "Sign in") %>
<div class="row">
  <div class="span6 offset3">
    <%= form_for(:session, url: sessions_path) do |f| %>
      <%= f.label :email %>
      <%= f.text_field :email %>

      <%= f.label :password %>
      <%= f.password_field :password %>

      <%= f.submit "Sign in" %>
    <% end %>
    <p>New user? <%= link_to "Sign Up!", signup_path %> </p>
  </div>
</div>


#NOTE: when user signs in, data is posted like this:
{ session: { password: "", email: "" } }

#You can see that
params[:session] itself is a hash

params[:session] => { password: "", email: "" }

#so 
params[:session][:email]
params[:session][:password]


#so, to actually signin , do this:
#app/controllers/sessions_controller.rb

  def create
    user = User.find_by(email: params[:session][:email].downcase)
    if user && user.authenticate(params[:session][:password])
      #Sign in
      sign_in user
      redirect_to user #or to last page they were on
    else
       #fail
       flash[:error] = 'Invalid email/pw combo'
       render 'new'
    end
  end  
 
  def destroy #user signs out
    sign_out
    redirect_to root_url
  end


#If want browser to remember person, and only sign out when user EXPLICITLY signs out...
#use a remember_token for session, based on user id
  session[:remember_token] = user.id
  User.find(session[:remember_token])
  User.find_by(remember_token: remember_token)
#let's create a helper module thing for sessions, SessionsHelper
#have application_controller take control of it

#in app/controllers/application_controller.rb
class ApplicationController < ...
  protect_from_forgery with: :exception
  include SessionsHelper
end

#in app/helpers/sessions_helper.rb
module SessionsHelper
  def sign_in(user)
    remember_token = User.new_remember_token #[1] create new token
    cookies.permanent[:remember_token] = remember_token #[2] place raw token into browser cookie
    user.update_attribute(:remember_token, User.digest(remember_token)) #save hashed token to DB
    self.current_user = user #set current user equal to given user
  end
 
  def current_user=(user)
   @current_user = user
  end
  
  def current_user #the only secure way to do it. force to use token
    remember_token = User.digest(cookies[:remember_token])
    @current_user ||= User.find_by(remember_token: remember_token)
  end  

  def current_user?(user) #checks if 'current_user' == 'user'
    #logged in      #another user, fed in from a user controller
    current_user == user
  end

  def signed_in?
    !current_user.nil?
  end

  def sign_out
    current_user.update_attributes(:remember_token => User.digest(User.new_remember_token))
    cookies.delete(:remember_token)
    self.current_user = nil
  end
end

#random, we can save cookies as:
cookies[:remember_token] = { value:   remember_token,
                             expires: 20.years.from_now.utc }
same as
  cookies.permanent[:remember_token] = remember_token
#helpers are available in the views but not in controllers so we include it explicitly

rails g migration add_remember_token_to_users
#db/migrate/[ts]_add_remember_token_to_users.rb
  def change
    add_column :users, :remember_token, :string
    add_index :users, :remember_token
  end

#We have users create the remember token
#in app/models/user.rb
  before_create :create_remember_token

  def User.new_remember_token
    SecureRandom.urlsafe_base64
  end
  def User.digest(token)
    Digest::SHA1.hexdigest(token.to_s)
  end
  private
  def create_remember_token
    self.remember_token = User.digest(User.new_remember_token)
  end


<%= link_to "Sign out", signout_path, method: "delete" %>
